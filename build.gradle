// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply plugin: 'com.alibaba.arouter'

buildscript {
    apply from: 'versions.gradle'

    ext {
        lib_config = "${rootDir}/lib_config.gradle"
        module_config = "${rootDir}/module_config.gradle"
//        module_dependencies = "${rootDir}/dependencies.gradle"
        secret = "${rootDir}/secret.gradle"
    }

    repositories {
        // 以下两行代码相当于有了 google() jcenter() mavenCentral()，使用国内的阿里镜像
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/google' }


        maven { url 'https://dl.bintray.com/umsdk/release' }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:${gradle_plugins}"
        classpath deps.kotlin.gradle
        classpath "com.alibaba:arouter-register:1.0.2"
        //walle多渠道打包
        classpath 'com.meituan.android.walle:plugin:1.1.6'
        // 添加emas-services插件
        classpath 'com.aliyun.ams:emas-services:1.0.1'
        // AndResGuard
        classpath 'com.tencent.mm:AndResGuard-gradle-plugin:1.2.17'
    }
}

allprojects {
    repositories {
        // 以下两行代码相当于有了 google() jcenter() mavenCentral()，使用国内的阿里镜像
        maven { url 'https://maven.aliyun.com/nexus/content/groups/public' }
        maven { url 'https://maven.aliyun.com/nexus/content/repositories/google' }

        maven { url 'https://jitpack.io' }
        maven { url 'https://dl.bintray.com/umsdk/release' }
        flatDir {
            dirs 'libs' //this way we can find the .aar file in libs folder
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}